AWSTemplateFormatVersion: 2010-09-09

Parameters:
  SharedStackName:
    Type: String
    Default: shared-stack

  ECSServiceName:
    Type: String
    Default: mindhub-api-service

  UsersCognitoPoolId:
    Type: String
    Default: us-east-1_ACYhVKPRs
    Description: When we add Cognito to the CF stacks this wont be a parameter any more

  UsersCognitoClientId:
    Type: String
    Default: 62bbaabpoj8js7g19utrdnpnto
    Description: When we add Cognito to the CF stacks this wont be a parameter any more

  PublicApiUrl:
    Type: String
    Default: https://api.mindhub.ar
    Description: When we add Route53 to the CF stacks this wont be a parameter any more

  SpotifyClientSecret:
    Type: String
    Default: cdd0708661b64a10b12bd09b14aa540d

  MongoAtlasUriSecret:
    Type: String
    Default: mongodb+srv://mindhub-api:VHg9ZboGbIXWxB8D@maincluster.vsueoh3.mongodb.net/

Resources:

  # -------------------------------- IAM --------------------------------

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-mindhub-api-role
      Description: Allows resource access to MindHub API running as an ECS service
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies: 
        - PolicyName: mindhub-api-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
              - cognito-idp:GetUser
              - cognito-idp:ListUsers
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - ses:SendEmail
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              Resource: "*"

 
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /ecs/mindhub-api
      RetentionInDays: 7

  OtelCollectorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /ecs/ecs-aws-otel-sidecar-collector
      RetentionInDays: 7

  # -------------------------------- ECS --------------------------------

  ECSTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: mindhub-api
      
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX

      TaskRoleArn: arn:aws:iam::598854603683:role/ecs-general-role
      ExecutionRoleArn: arn:aws:iam::598854603683:role/ecsTaskExecutionRole

      ContainerDefinitions:

      - Name: nginx
        Image: public.ecr.aws/n9t4t7x6/nginx
        Cpu: 256
        Memory: 512
        Essential: true
        PortMappings:
        - Name: nginx-80-tcp
          ContainerPort: 80
          HostPort: 80
          Protocol: tcp
        Environment: []
        MountPoints: []
        VolumesFrom: []

      - Name: api
        Image: public.ecr.aws/n9t4t7x6/mindhub-api
        Cpu: 256
        Memory: 512
        Essential: true
        PortMappings: []
        Environment:
        - Name: USERS_COGNITO_POOL_ID
          Value: !Ref UsersCognitoPoolId
          
        - Name: USERS_COGNITO_CLIENT_ID
          Value: !Ref UsersCognitoClientId

        - Name: USERS_PICTURES_BUCKET
          Value:
            Fn::ImportValue: 
              !Sub '${SharedStackName}-UserPicturesBucketName'
              
        - Name: PROVIDERS_SYNC_REQUESTS_QUEUE_URL
          Value:
            Fn::ImportValue: 
              !Sub '${SharedStackName}-ProviderSyncRequestQueueURL'

        - Name: PROVIDERS_FILE_UPLOADED_QUEUE_URL
          Value:
            Fn::ImportValue: 
              !Sub '${SharedStackName}-ProviderFileUploadedQueueURL'

        - Name: DEPLOYMENT_BASE_URL
          Value: !Ref PublicApiUrl

        - Name: PORT
          Value: '3000'
        
        - Name: MONGO_ATLAS_URI
          Value: !Ref MongoAtlasUriSecret

        - Name: SPOTIFY_CLIENT_SECRET
          Value: !Ref SpotifyClientSecret
        MountPoints: []
        VolumesFrom: []
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-create-group: 'true'
            awslogs-group: "/ecs/mindhub-api"
            awslogs-region: us-east-1
            awslogs-stream-prefix: ecs
          SecretOptions: []

      - Name: aws-otel-collector
        Image: public.ecr.aws/aws-observability/aws-otel-collector:v0.33.0
        Cpu: 0
        Essential: true
        PortMappings: []
        Command:
        - "--config=/etc/ecs/ecs-cloudwatch-xray.yaml"
        Environment: []
        MountPoints: []
        VolumesFrom: []
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-create-group: 'true'
            awslogs-group: "/ecs/ecs-aws-otel-sidecar-collector"
            awslogs-region: us-east-1
            awslogs-stream-prefix: ecs
          SecretOptions: []     

    DependsOn:
      - ApiLogGroup
      - OtelCollectorLogGroup

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref ECSServiceName
      Cluster:
        Fn::ImportValue: 
          !Sub '${SharedStackName}-ECSMainClusterName'
      TaskDefinition: !Ref ECSTaskDef
      LaunchType: FARGATE
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      EnableECSManagedTags: true

      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          LoadBalancerName: !Ref 'AWS::NoValue'
          TargetGroupArn: !Ref TargetGroup
      
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: 
                !Sub '${SharedStackName}-PublicSecurityGroupId'
          Subnets:
            - Fn::ImportValue: 
                !Sub '${SharedStackName}-PublicSubnetAId'
            - Fn::ImportValue: 
                !Sub '${SharedStackName}-PublicSubnetBId'
      
      PlatformVersion: LATEST
      
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      
      DeploymentController:
        Type: ECS
      
      ServiceConnectConfiguration:
        Enabled: false
      
    DependsOn:
      - Listener

  # -------------------------------- LOAD BALANCING --------------------------------

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: mindhub-lb
      Type: application
      SecurityGroups:
        - Fn::ImportValue: 
            !Sub '${SharedStackName}-PublicSecurityGroupId'
      Subnets:
        - Fn::ImportValue: 
            !Sub '${SharedStackName}-PublicSubnetAId'
        - Fn::ImportValue: 
            !Sub '${SharedStackName}-PublicSubnetAId'

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: mindhub-api-tg
      TargetType: ip
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      VpcId:
        Fn::ImportValue: 
          !Sub '${SharedStackName}-VpcId'
  
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn:
        Fn::ImportValue: 
          !Sub '${SharedStackName}-LoadBalancerARN'

  # -------------------------------- AUTOSCALING --------------------------------
  
  AutoScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      ResourceId:
        !Sub "service/main-cluster/${ECSServiceName}"
      MinCapacity: 1
      MaxCapacity: 10
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
      RoleARN: arn:aws:iam::598854603683:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
    DependsOn:
      - ECSService
  
  AutoScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      ResourceId:
          !Sub "service/main-cluster/${ECSServiceName}"
      PolicyName: avg-cpu-utilization-target-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
    DependsOn:
      - ECSService
  
