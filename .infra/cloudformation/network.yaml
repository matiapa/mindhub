AWSTemplateFormatVersion: "2010-09-09"

Resources:

  # -------------------------------- VPC --------------------------------

  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # -------- NACL -------- 

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: public-nacl
      VpcId: !Ref VPC
  
  PublicNACLIngressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      CidrBlock: 0.0.0.0/0
      Protocol: 6 # TCP
      PortRange: 
        From: 0
        To: 65535
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PublicNetworkAcl

  PublicNACLEgressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      CidrBlock: 0.0.0.0/0
      Protocol: -1 # This means all tcp (6), udp (17) and icmp (1)
      PortRange:
        From: 0
        To: 65535
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PublicNetworkAcl

  # -------- Security group -------- 

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: A generic security group for allowing public ingress and egress traffic
      GroupName: public-sg
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: '-1'  # This means all tcp, udp, icmp and icmpv6
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: '-1'  # This means all tcp, udp, icmp and icmpv6
      VpcId:
        !Ref VPC

  # -------- Route tables -------- 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: public-rt
      VpcId: !Ref VPC

  PublicRTInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # -------- Subnet A -------- 

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
        - Key: Name
          Value: public-subnet-a
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref VPC

  PublicSubnetANaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetA

  PublicSubnetARtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  # -------- Subnet B -------- 

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
        - Key: Name
          Value: public-subnet-b
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref VPC

  PublicSubnetBNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetB

  PublicSubnetBRtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  # -------------------------------- Route53 --------------------------------

  MindhubHostedZone:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Route53::HostedZone"
    DeletionPolicy: "Delete"
    Properties:
      Name: "mindhub.ar."

  RouteResolver:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Route53Resolver::ResolverRuleAssociation"
    DeletionPolicy: "Delete"
    Properties:
      VPCId: !Ref VPC
      ResolverRuleId: "rslvr-autodefined-rr-internet-resolver"
      Name: "System Rule Association"

Outputs:
  VPCId:
    Value:
      !Ref VPC
    Export:
      Name:
        !Sub "${AWS::StackName}-VpcId"
  
  PublicSubnetAId:
    Value:
      !Ref PublicSubnetA
    Export:
      Name:
        !Sub "${AWS::StackName}-PublicSubnetAId"

  PublicSubnetBId:
    Value:
      !Ref PublicSubnetB
    Export:
      Name:
        !Sub "${AWS::StackName}-PublicSubnetBId"

  PublicSecurityGroupId:
    Value:
      !Ref PublicSecurityGroup
    Export:
      Name:
        !Sub "${AWS::StackName}-PublicSecurityGroupId"