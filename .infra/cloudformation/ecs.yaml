AWSTemplateFormatVersion: 2010-09-09

Description: The template used to create an ECS Service from the ECS Console.

Parameters:
  NetworkStackName:
    Type: String

  VpcId:
    Type: String
    Default:
      Fn::ImportValue: 
        'Fn::Sub': '${NetworkStackName}-VpcId'

  PublicSubnetAId:
    Type: String
    Default:
      Fn::ImportValue: 
        'Fn::Sub': '${NetworkStackName}-PublicSubnetAId'

  PublicSubnetBId:
    Type: String
    Default:
      Fn::ImportValue: 
        'Fn::Sub': '${NetworkStackName}-PublicSubnetBId'

  SecurityGroupIDs:
    Type: CommaDelimitedList
    Default: sg-0450a2e73c8b27ceb,subnet-0cee929cf9ad94e14

  ECSTaskDefinition:
    Type: String
    Default: arn:aws:ecs:us-east-1:598854603683:task-definition/mindhub-api:6

  ECSClusterName:
    Type: String
    Default: main-cluster

  LoadBalancerName:
    Type: String
    Default: mindhub-lb

Resources:

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ECSClusterName
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: main-cluster
      Tags: []

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: main-cluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      ServiceName: mindhub-api-service
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      EnableECSManagedTags: true

      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          LoadBalancerName: !Ref 'AWS::NoValue'
          TargetGroupArn: !Ref TargetGroup
      
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Ref SecurityGroupIDs
          Subnets:
            - !Ref PublicSubnetAId
            - !Ref PublicSubnetBId
      
      PlatformVersion: LATEST
      
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      
      DeploymentController:
        Type: ECS
      
      ServiceConnectConfiguration:
        Enabled: false
      
    DependsOn:
      - Listener

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Name: mindhub-api-lb
      SecurityGroups: !Ref SecurityGroupIDs
      Subnets:
        - !Ref PublicSubnetAId
        - !Ref PublicSubnetBId

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /health
      Name: mindhub-api-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcId
  
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  
  AutoScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: '10'
      MinCapacity: '1'
      ResourceId: service/main-cluster/mindhub-api-service
      RoleARN: >-
        arn:aws:iam::598854603683:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
    DependsOn:
      - ECSService
  
  AutoScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: avg-cpu-utilization-target-policy
      PolicyType: TargetTrackingScaling
      ResourceId: service/main-cluster/mindhub-api-service
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleInCooldown: '300'
        ScaleOutCooldown: '300'
        TargetValue: '70'
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  
Outputs:
  ECSCluster:
    Description: The created cluster.
    Value: !Ref ECSCluster

  ECSService:
    Description: The created service.
    Value: !Ref ECSService

  LoadBalancer:
    Description: The created load balancer.
    Value: !Ref LoadBalancer

  Listener:
    Description: The created listener.
    Value: !Ref Listener

  TargetGroup:
    Description: The created target group.
    Value: !Ref TargetGroup

  AutoScalingTarget:
    Value: !Ref AutoScalingTarget

  AutoScalingPolicy:
    Value: !Ref AutoScalingPolicy
