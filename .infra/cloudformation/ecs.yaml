AWSTemplateFormatVersion: 2010-09-09

Description: The template used to create an ECS Cluster from the ECS Console.

Parameters:
  ECSClusterName:
    Type: String
    Default: MainCluster

  SubnetIds:
    Type: CommaDelimitedList
    Default: ''

  SecurityGroupIds:
    Type: CommaDelimitedList
    Default: ''

  LatestECSOptimizedAMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  UserData:
    Type: String
    Default: |-
      #!/bin/bash 
      echo ECS_CLUSTER=MainCluster >> /etc/ecs/ecs.config;
      
  IamRoleInstanceProfile:
    Type: String
    Default: 'arn:aws:iam::598854603683:instance-profile/ecsInstanceRole'

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: MainCluster
      Tags: []

  ECSLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    DependsOn: ECSCluster
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestECSOptimizedAMI
        SecurityGroupIds: !Ref SecurityGroupIds
        InstanceType: t2.micro
        KeyName: ec2-key
        IamInstanceProfile:
          Arn: !Ref IamRoleInstanceProfile
        UserData: !Base64 
          Ref: UserData

  ECSAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: ECSCluster
    Properties:
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt 
          - ECSLaunchTemplate
          - LatestVersionNumber
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Join 
            - ' - '
            - - ECS Instance
              - !Ref ECSClusterName

  EC2CapacityProvider:
    Type: 'AWS::ECS::CapacityProvider'
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED
  
  ClusterCPAssociation:
    Type: 'AWS::ECS::ClusterCapacityProviderAssociations'
    DependsOn: ECSCluster
    Properties:
      Cluster: MainCluster
      CapacityProviders:
        - !Ref EC2CapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref EC2CapacityProvider

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-task-execution-role
      Description: Gives ECS permissions needed to start a task, for example for pulling images from ECR
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        
Outputs:
  ECSCluster:
    Description: The created cluster.
    Value: !Ref ECSCluster
