AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  PublicFrontUrl:
    Type: String
    Default: https://app.mindhub.ar
    Description: When we add Route53 to the CF stacks this wont be a parameter any more

Resources:

  # -------------------------------- IAM --------------------------------

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-task-execution-role
      Description: Gives ECS permissions needed to start a task, for example for pulling images from ECR
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # -------------------------------- VPC --------------------------------

  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # -------- NACL -------- 

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: public-nacl
      VpcId: !Ref VPC
  
  PublicNACLIngressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: false
      CidrBlock: 0.0.0.0/0
      Protocol: 6 # TCP
      PortRange: 
        From: 0
        To: 65535
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PublicNetworkAcl

  PublicNACLEgressEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Egress: true
      CidrBlock: 0.0.0.0/0
      Protocol: -1 # This means all tcp (6), udp (17) and icmp (1)
      PortRange:
        From: 0
        To: 65535
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PublicNetworkAcl

  # -------- Security group -------- 

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: A generic security group for allowing public ingress and egress traffic
      GroupName: public-sg
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: '-1'  # This means all tcp, udp, icmp and icmpv6
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: '-1'  # This means all tcp, udp, icmp and icmpv6
      VpcId:
        !Ref VPC

  # -------- Route tables -------- 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: public-rt
      VpcId: !Ref VPC

  PublicRTInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # -------- Subnet A -------- 

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
        - Key: Name
          Value: public-subnet-a
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref VPC

  PublicSubnetANaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetA

  PublicSubnetARtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  # -------- Subnet B -------- 

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags: 
        - Key: Name
          Value: public-subnet-b
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref VPC

  PublicSubnetBNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnetB

  PublicSubnetBRtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  # -------------------------------- ECS --------------------------------

  ECSMainCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: main-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: main-cluster

  # --------------------------- SQS ---------------------------

  ProviderSyncRequestQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: provider-sync-requests-queue
      ReceiveMessageWaitTimeSeconds: 20 # Long polling
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt ProviderSyncRequestsDltQueue.Arn
        maxReceiveCount: 5
      VisibilityTimeout: 30

  ProviderSyncRequestsDltQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: provider-sync-requests-dlt-queue
      ReceiveMessageWaitTimeSeconds: 20 # Long polling

  ProviderFileUploadedQueue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: provider-file-uploaded-queue
      ReceiveMessageWaitTimeSeconds: 20 # Long polling
      VisibilityTimeout: 30

  # --------------------------- S3 ---------------------------

  UserPicturesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: user-pictures-bucket
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
          AllowedOrigins:
            - !Ref PublicFrontUrl

  ProviderFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: provider-files-bucket
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue:
              !GetAtt ProviderFileUploadedQueue.Arn

  ProviderFileUploadedQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - ProviderFileUploadedQueue
    Properties:
      Queues:
        - !Ref ProviderFileUploadedQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - SQS:SendMessage
            Resource:
              !GetAtt ProviderFileUploadedQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn:
                  !GetAtt ProviderFilesBucket.Arn
Outputs:
  VPCId:
    Value:
      !Ref VPC
    Export:
      Name:
        !Sub "${AWS::StackName}-VpcId"
  
  PublicSubnetAId:
    Value:
      !Ref PublicSubnetA
    Export:
      Name:
        !Sub "${AWS::StackName}-PublicSubnetAId"

  PublicSubnetBId:
    Value:
      !Ref PublicSubnetB
    Export:
      Name:
        !Sub "${AWS::StackName}-PublicSubnetBId"

  PublicSecurityGroupId:
    Value:
      !Ref PublicSecurityGroup
    Export:
      Name:
        !Sub "${AWS::StackName}-PublicSecurityGroupId"

  ECSMainClusterName:
    Value:
      !Ref ECSMainCluster
    Export:
      Name:
        !Sub "${AWS::StackName}-ECSMainClusterName"

  ECSTaskExecutionRoleARN:
    Value:
      !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name:
        !Sub "${AWS::StackName}-ECSTaskExecutionRoleARN"

  ProviderSyncRequestQueueURL:
    Value:
      !Ref ProviderSyncRequestQueue
    Export:
      Name:
        !Sub "${AWS::StackName}-ProviderSyncRequestQueueURL"

  ProviderSyncRequestQueueARN:
    Value:
      !GetAtt ProviderSyncRequestQueue.Arn
    Export:
      Name:
        !Sub "${AWS::StackName}-ProviderSyncRequestQueueARN"

  ProviderFileUploadedQueueURL:
    Value:
      !Ref ProviderFileUploadedQueue
    Export:
      Name:
        !Sub "${AWS::StackName}-ProviderFileUploadedQueueURL"

  ProviderFileUploadedQueueARN:
    Value:
      !GetAtt ProviderFileUploadedQueue.Arn
    Export:
      Name:
        !Sub "${AWS::StackName}-ProviderFileUploadedQueueARN"

  ProviderFilesBucketName:
    Value:
      !Ref ProviderFilesBucket
    Export:
      Name:
        !Sub "${AWS::StackName}-ProviderFilesBucketName"
  
  UserPicturesBucketName:
    Value:
      !Ref UserPicturesBucket
    Export:
      Name:
        !Sub "${AWS::StackName}-UserPicturesBucketName"
