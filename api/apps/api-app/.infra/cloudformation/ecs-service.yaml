AWSTemplateFormatVersion: 2010-09-09

Description: The template used to create an ECS Service from the ECS Console.

Parameters:
  VpcID:
    Type: String
    Default: vpc-078cbbc429d3dbdb8

  SubnetIDs:
    Type: CommaDelimitedList
    Default: 'subnet-0e21374e0d4780957,subnet-056490a50a7f8a210'

  SecurityGroupIDs:
    Type: CommaDelimitedList
    Default: sg-0d2778d9dcf37c9ef

  ECSTaskDef:
    Type: String
    Default: 'arn:aws:ecs:us-east-1:598854603683:task-definition/mindhub-api:12'

Resources:
  # -------------------------------- ECS SERVICE --------------------------------

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: mindhub-api-service
      TaskDefinition: !Ref ECSTaskDef
      Cluster: MainCluster
      
      SchedulingStrategy: REPLICA
      DesiredCount: 1

      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          LoadBalancerName: !Ref 'AWS::NoValue'
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: '60'

      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: !Ref SecurityGroupIDs
          Subnets: !Ref SubnetIDs

      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS

      ServiceConnectConfiguration:
        Enabled: false

      PlacementStrategies:
        - Field: 'attribute:ecs.availability-zone'
          Type: spread
        - Field: instanceId
          Type: spread 
      PlacementConstraints: []
      
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - Listener

  # -------------------------------- LOAD BALANCING --------------------------------

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Name: mindhub-api-service-lb
      SecurityGroups: !Ref SecurityGroupIDs
      Subnets: !Ref SubnetIDs

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /
      Name: mindhub-api-service-tg
      Port: 443
      Protocol: HTTPS
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcID

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: >-
            arn:aws:acm:us-east-1:598854603683:certificate/a7aa0a2b-2374-4b77-8406-6edaa8f82f30

  # -------------------------------- AUTOSCALING --------------------------------

  AutoScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: '1'
      MinCapacity: '1'
      ResourceId: service/MainCluster/mindhub-api-service
      RoleARN: >-
        arn:aws:iam::598854603683:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
    DependsOn:
      - ECSService

  AutoScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: ecs-average-cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ResourceId: service/MainCluster/mindhub-api-service
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        ScaleInCooldown: '300'
        ScaleOutCooldown: '300'
        TargetValue: '70'
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

Outputs:
  LoadBalancer:
    Description: The created load balancer.
    Value: !Ref LoadBalancer
  Listener:
    Description: The created listener.
    Value: !Ref Listener
  TargetGroup:
    Description: The created target group.
    Value: !Ref TargetGroup
  AutoScalingTarget:
    Value: !Ref AutoScalingTarget
  AutoScalingPolicy:
    Value: !Ref AutoScalingPolicy
