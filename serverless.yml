service: mindhub
frameworkVersion: '3'

custom:
  cognito:
    userPoolArn: arn:aws:cognito-idp:us-east-1:598854603683:userpool/us-east-1_ACYhVKPRs

  dynamo:
    usersTable: 'users-table'
    friendshipsTable: 'friendships-table'
    providerTokens: 'provider-tokens-table'
    resourcesTable: 'resources-table'
    interestsTable: 'interests-table'
    textsTable: 'texts-table'
  
  s3:
    picturesBucket:
      name: 'mindhub-pictures-bucket'
      allowedOrigins: 'https://mindhub.ar'
    providerFilesBucket:
      name: 'provider-files-bucket'

  sqs:
    providerSyncRequestsQueue:
      name: 'provider-sync-requests-queue'
      dltName: 'provider-sync-requests-dlt-queue'
      maxRetries: 5
      visibilityTimeoutSecs: 30
    providerFileUploadedQueue:
      name: 'provider-file-uploaded-queue'
      visibilityTimeoutSecs: 30

  esbuild: 
    bundle: true
    minify: false
    sourcemap: true
    exclude: [aws-sdk]
    target: node18
    define: 'require.resolve: undefined'
    platform: node
    concurrency: 10

  serverless-dynamodb:
    start:
      port: 8000
      docker: false
      migrate: true
    stages: dev

provider:
  name: aws
  runtime: nodejs18.x
  apiGateway:
      shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
        - Effect: Allow
          Action:
            - s3:putObjectAcl
          Resource:
            - Fn::GetAtt: [ PicturesBucket, Arn ]
          
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: --enable-source-maps --stack-trace-limit=1000

# functions:
#   app: 
#     handler: dist/main.handler
#     events:
#       - http:
#           method: any
#           path: /{any+}
#           cors: true
#           integration: lambda-proxy
#           authorizer:
#             name: PrivateAuthorizer
#             type: COGNITO_USER_POOLS
#             arn: ${self:custom.cognito.userPoolArn}

resources:
  Resources:
    # --------------------------- TABLES ---------------------------
    
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamo.usersTable}
        AttributeDefinitions: 
          - AttributeName: _id
            AttributeType: S
        KeySchema: 
          - AttributeName: _id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    FriendshipsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamo.friendshipsTable}
        AttributeDefinitions:
          - AttributeName: proposer
            AttributeType: S 
          - AttributeName: target
            AttributeType: S
        KeySchema: 
          - AttributeName: proposer
            KeyType: HASH
          - AttributeName: target
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: InvertedIndex
            KeySchema:
              - AttributeName: target
                KeyType: HASH
              - AttributeName: proposer
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ProviderTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamo.providerTokens}
        AttributeDefinitions: 
          - AttributeName: userId
            AttributeType: S
          - AttributeName: service
            AttributeType: S
        KeySchema: 
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: service
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    
    ResourcesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamo.resourcesTable}
        AttributeDefinitions:
          - AttributeName: resourceId
            AttributeType: S 
        KeySchema: 
          - AttributeName: resourceId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    
    InterestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamo.interestsTable}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S 
          - AttributeName: resourceId
            AttributeType: S
        KeySchema: 
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: resourceId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    TextsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamo.textsTable}
        AttributeDefinitions:
          - AttributeName: ownerId
            AttributeType: S 
          - AttributeName: date
            AttributeType: S
        KeySchema: 
          - AttributeName: ownerId
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # --------------------------- BUCKETS ---------------------------

    PicturesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3.picturesBucket.name}
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
            AllowedOrigins:
              - ${self:custom.s3.picturesBucket.allowedOrigins}

    ProviderFilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3.providerFilesBucket.name}
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:*
              Queue:
                Fn::GetAtt: [ ProviderFileUploadedQueue, Arn ]
  
    # --------------------------- QUEUES ---------------------------

    ProviderSyncRequestQueue:
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: ${self:custom.sqs.providerSyncRequestsQueue.name}
        ReceiveMessageWaitTimeSeconds: 20 # Long polling
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [ ProviderSyncRequestsDltQueue, Arn ]
          maxReceiveCount: ${self:custom.sqs.providerSyncRequestsQueue.maxRetries}
        VisibilityTimeout: ${self:custom.sqs.providerSyncRequestsQueue.visibilityTimeoutSecs}

    ProviderSyncRequestsDltQueue:
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: ${self:custom.sqs.providerSyncRequestsQueue.dltName}
        ReceiveMessageWaitTimeSeconds: 20 # Long polling
        # TODO: Circular dependency, by the moment allow all
        # RedriveAllowPolicy:
        #   redrivePermission: byQueue
        #   sourceQueueArns:
        #     - Fn::GetAtt: [ ProviderSyncRequestQueue, Arn ]

    ProviderFileUploadedQueue:
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: ${self:custom.sqs.providerFileUploadedQueue.name}
        ReceiveMessageWaitTimeSeconds: 20 # Long polling
        VisibilityTimeout: ${self:custom.sqs.providerFileUploadedQueue.visibilityTimeoutSecs}

    ProviderFileUploadedQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      DependsOn:
        - ProviderFileUploadedQueue
      Properties:
        Queues:
          - !Ref ProviderFileUploadedQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action:
                - SQS:SendMessage
              Resource:
                Fn::GetAtt: [ ProviderFileUploadedQueue, Arn ]
              Condition:
                ArnLike:
                  aws:SourceArn:
                    Fn::GetAtt: [ ProviderFilesBucket, Arn ]
    
# plugins:
#   - serverless-offline
#   - serverless-dynamodb

package:
  patterns:
    - "!*"
    - "!*/**"
    # - "node_modules/**"
    # - "dist/**"
