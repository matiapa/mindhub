openapi: 3.0.0
paths:
  /users/me:
    post:
      operationId: UsersController_signupUser
      summary: Sign up the user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupReqDto'
      responses:
        '201':
          description: ''
      tags: &ref_0
        - Users
      security: &ref_1
        - bearer: []
    get:
      operationId: UsersController_getOwnUser
      summary: Get authenticated user information
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOwnUserResDto'
      tags: *ref_0
      security: *ref_1
  /users/me/profile:
    put:
      operationId: UsersController_updateProfile
      summary: Update authenticated user profile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileReqDto'
      responses:
        '200':
          description: ''
      tags: *ref_0
      security: *ref_1
  /users/me/connection:
    put:
      operationId: UsersController_updateLastConnection
      summary: Update authenticated user last connection
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLastConnectionReqDto'
      responses:
        '200':
          description: ''
      tags: *ref_0
      security: *ref_1
  /users/me/pictureUploadUrl:
    get:
      operationId: UsersController_getPictureUploadUrl
      summary: Get a temporary URL for uploading picture
      parameters:
        - name: fileMime
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_0
      security: *ref_1
  /users/{id}:
    get:
      operationId: UsersController_getById
      summary: Get public information of a user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: optionalFields[]
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedUserInfo'
      tags: *ref_0
      security: *ref_1
  /friendships:
    post:
      operationId: FriendshipsController_proposeFriendship
      summary: Send a friendship request
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposeFriendshipDto'
      responses:
        '201':
          description: ''
      tags: &ref_2
        - Friendships
      security: &ref_3
        - bearer: []
    get:
      operationId: FriendshipsController_getFriendships
      summary: Get friendships, either accepted ones, or sent/received requests
      parameters:
        - name: optionalFields[]
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
        - name: type
          required: true
          in: query
          schema:
            enum:
              - proposed
              - received
              - established
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFriendshipsResDto'
      tags: *ref_2
      security: *ref_3
  /friendships/{proposerId}:
    put:
      operationId: FriendshipsController_reviewRequest
      summary: Accept or reject a friendship request
      parameters:
        - name: proposerId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequestDto'
      responses:
        '200':
          description: ''
      tags: *ref_2
      security: *ref_3
  /recommendations:
    get:
      operationId: RecommendationsController_getRecommendations
      summary: Get friendship recommendations
      parameters:
        - name: optionalFields[]
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
        - name: priority
          required: true
          in: query
          schema:
            enum:
              - affinity
              - distance
              - activity
            type: string
        - name: offset
          required: true
          in: query
          schema:
            type: number
        - name: limit
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecommendationsResDto'
      tags: &ref_4
        - Recommendations
      security: &ref_5
        - bearer: []
  /recommendations/{recommendedUserId}:
    put:
      operationId: RecommendationsController_reviewRecommendation
      summary: Accept or discard a friendship recommendation
      parameters:
        - name: recommendedUserId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRecommendationReqDto'
      responses:
        '200':
          description: ''
      tags: *ref_4
      security: *ref_5
  /interests:
    post:
      operationId: InterestsController_create
      summary: Create an interest relationship
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInterestDto'
      responses:
        '201':
          description: ''
      tags: &ref_6
        - Interests
      security: &ref_7
        - bearer: []
  /interests/shared:
    get:
      operationId: InterestsController_getShared
      summary: >-
        Get interests of a user that are shared with the ones of the
        authenticated user
      parameters:
        - name: userId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSharedInterestsResDto'
      tags: *ref_6
      security: *ref_7
  /interests/me:
    get:
      operationId: InterestsController_getOwn
      summary: Get the interests of the authenticated user
      parameters:
        - name: resourceName
          required: false
          in: query
          schema:
            type: string
        - name: offset
          required: true
          in: query
          schema:
            type: number
        - name: limit
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserInterestsResDto'
      tags: *ref_6
      security: *ref_7
  /interests/{id}:
    delete:
      operationId: InterestsController_delete
      summary: Delete an interest relationship
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_6
      security: *ref_7
  /texts:
    post:
      operationId: TextsController_create
      summary: Post a new text
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTextDto'
      responses:
        '201':
          description: ''
      tags: &ref_8
        - Texts
      security: &ref_9
        - bearer: []
    get:
      operationId: TextsController_getOwn
      summary: Get the texts of the authenticated user
      parameters:
        - name: subtext
          required: false
          in: query
          schema:
            type: string
        - name: offset
          required: true
          in: query
          schema:
            type: number
        - name: limit
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserTextsResDto'
      tags: *ref_8
      security: *ref_9
  /texts/{id}:
    delete:
      operationId: TextsController_delete
      summary: Delete a text
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_8
      security: *ref_9
  /providers:
    get:
      operationId: ConnectionsController_getConnections
      summary: Get the connected providers
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProviderConnsResDto'
      tags:
        - Providers
      security:
        - bearer: []
  /providers/{providerName}/login:
    get:
      operationId: AuthController_login
      summary: Get the URL for starting the authentication flow
      parameters:
        - name: providerName
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: &ref_10
        - Providers
      security:
        - bearer: []
  /providers/{providerName}/redeemCode:
    get:
      operationId: AuthController_redeemCode
      summary: Redeem the obtained code to finalize authentication flow
      parameters:
        - name: providerName
          required: true
          in: path
          schema:
            type: string
        - name: state
          required: true
          in: query
          schema:
            type: string
        - name: code
          required: true
          in: query
          schema:
            type: string
        - name: error
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_10
  /providers/{providerName}/fileUploadUrl:
    get:
      operationId: FileController_getFileUploadUrl
      summary: Get the URL for uploading provider data file as a ZIP
      parameters:
        - name: providerName
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags:
        - Providers
      security:
        - bearer: []
  /rates:
    post:
      operationId: RatesController_postRate
      summary: Send a rate
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRateDto'
      responses:
        '201':
          description: ''
      tags: &ref_11
        - Rates
      security: &ref_12
        - bearer: []
    get:
      operationId: RatesController_getGivenRates
      summary: Get given rates
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGivenRatesResDto'
      tags: *ref_11
      security: *ref_12
  /messages:
    post:
      operationId: MessagesController_postMessage
      summary: Send a message
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageDto'
      responses:
        '201':
          description: ''
      tags: &ref_13
        - Messages
      security: &ref_14
        - bearer: []
    get:
      operationId: MessagesController_getMessages
      summary: Get messages with a specific user
      parameters:
        - name: counterpartyId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMessagesResDto'
      tags: *ref_13
      security: *ref_14
  /health:
    get:
      operationId: HealthController_check
      parameters: []
      responses:
        '200':
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example: &ref_15
                      database: &ref_16
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example: *ref_15
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
        '503':
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example: *ref_15
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example:
                      redis: &ref_17
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database: *ref_16
                      redis: *ref_17
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
      tags:
        - Healthcheck
info:
  title: MindHub User API
  description: The user API to the MindHub system
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignupReqDto:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    Profile:
      type: object
      properties:
        name:
          type: string
        gender:
          type: string
          enum:
            - man
            - woman
            - other
        birthday:
          format: date-time
          type: string
        biography:
          type: string
        completed:
          type: boolean
      required:
        - name
        - gender
        - birthday
        - completed
    GetOwnUserResDto:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
      required:
        - profile
    UpdateProfileReqDto:
      type: object
      properties:
        gender:
          type: string
          enum:
            - man
            - woman
            - other
        birthday:
          type: string
        biography:
          type: string
      required:
        - gender
        - birthday
    UpdateLastConnectionReqDto:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
    ProfileDto:
      type: object
      properties:
        name:
          type: string
        gender:
          type: string
          enum:
            - man
            - woman
            - other
        age:
          type: number
        biography:
          type: string
      required:
        - name
        - gender
        - age
    ResourceDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
            - track
            - artist
      required:
        - id
        - name
        - type
    RelevanceDto:
      type: object
      properties:
        userId:
          type: string
        relevance:
          type: string
          enum:
            - normal
            - favorite
      required:
        - userId
        - relevance
    SharedInterestDto:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/ResourceDto'
        relevances:
          type: array
          items:
            $ref: '#/components/schemas/RelevanceDto'
      required:
        - resource
        - relevances
    UserPersonalityDto:
      type: object
      properties:
        userId:
          type: string
        o:
          type: number
        c:
          type: number
        e:
          type: number
        a:
          type: number
        'n':
          type: number
      required:
        - o
        - c
        - e
        - a
        - 'n'
    SharedUserInfo:
      type: object
      properties:
        _id:
          type: string
        profile:
          $ref: '#/components/schemas/ProfileDto'
        inactiveHours:
          type: number
        distance:
          type: number
        sharedInterests:
          type: array
          items:
            $ref: '#/components/schemas/SharedInterestDto'
        personality:
          $ref: '#/components/schemas/UserPersonalityDto'
        rating:
          type: number
      required:
        - _id
        - profile
        - inactiveHours
    ProposeFriendshipDto:
      type: object
      properties:
        target:
          type: string
      required:
        - target
    RecommendationScore:
      type: object
      properties:
        global:
          type: number
        friendship:
          type: object
        interests:
          type: object
      required:
        - global
        - friendship
        - interests
    FriendshipDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/SharedUserInfo'
        score:
          $ref: '#/components/schemas/RecommendationScore'
      required:
        - user
        - score
    GetFriendshipsResDto:
      type: object
      properties:
        friends:
          type: array
          items:
            $ref: '#/components/schemas/FriendshipDto'
      required:
        - friends
    ReviewRequestDto:
      type: object
      properties:
        accept:
          type: boolean
      required:
        - accept
    RecommendationDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/SharedUserInfo'
        score:
          $ref: '#/components/schemas/RecommendationScore'
      required:
        - user
        - score
    GetRecommendationsResDto:
      type: object
      properties:
        recommendations:
          type: array
          items:
            $ref: '#/components/schemas/RecommendationDto'
        count:
          type: number
        total:
          type: number
      required:
        - recommendations
        - count
        - total
    ReviewRecommendationReqDto:
      type: object
      properties:
        accept:
          type: boolean
      required:
        - accept
    CreateInterestDto:
      type: object
      properties:
        relevance:
          type: string
          enum:
            - normal
            - favorite
        resource:
          $ref: '#/components/schemas/ResourceDto'
      required:
        - relevance
        - resource
    GetSharedInterestsResDto:
      type: object
      properties:
        sharedInterests:
          type: array
          items:
            $ref: '#/components/schemas/SharedInterestDto'
      required:
        - sharedInterests
    UserInterestDto:
      type: object
      properties:
        _id:
          type: string
        provider:
          type: string
          enum:
            - spotify
            - twitter
            - user
        relevance:
          type: string
          enum:
            - normal
            - favorite
        resource:
          $ref: '#/components/schemas/ResourceDto'
        date:
          format: date-time
          type: string
      required:
        - _id
        - provider
        - relevance
        - resource
        - date
    GetUserInterestsResDto:
      type: object
      properties:
        interests:
          type: array
          items:
            $ref: '#/components/schemas/UserInterestDto'
        count:
          type: number
        total:
          type: number
      required:
        - interests
        - count
        - total
    CreateTextDto:
      type: object
      properties:
        rawText:
          type: string
        language:
          type: string
      required:
        - rawText
        - language
    UserTextDto:
      type: object
      properties:
        _id:
          type: string
        provider:
          type: string
          enum:
            - spotify
            - twitter
            - user
        rawText:
          type: string
        language:
          type: string
        date:
          format: date-time
          type: string
      required:
        - _id
        - provider
        - rawText
        - language
    GetUserTextsResDto:
      type: object
      properties:
        texts:
          type: array
          items:
            $ref: '#/components/schemas/UserTextDto'
        count:
          type: number
        total:
          type: number
      required:
        - texts
        - count
        - total
    ProcessingSummaryDto:
      type: object
      properties:
        interests:
          type: number
        texts:
          type: number
    LastProcessedDto:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
        summary:
          $ref: '#/components/schemas/ProcessingSummaryDto'
        date:
          format: date-time
          type: string
      required:
        - success
        - date
    ProviderConnectionDto:
      type: object
      properties:
        provider:
          type: string
        oauth:
          type: object
          properties:
            date:
              format: date-time
              type: string
        file:
          type: object
          properties:
            date:
              format: date-time
              type: string
        lastProcessed:
          $ref: '#/components/schemas/LastProcessedDto'
      required:
        - provider
        - oauth
        - file
    GetProviderConnsResDto:
      type: object
      properties:
        connections:
          type: array
          items:
            $ref: '#/components/schemas/ProviderConnectionDto'
      required:
        - connections
    PostRateDto:
      type: object
      properties:
        rateeId:
          type: string
        rating:
          type: number
      required:
        - rateeId
        - rating
    GivenRateDto:
      type: object
      properties:
        rateeId:
          type: string
        rating:
          type: number
      required:
        - rateeId
        - rating
    GetGivenRatesResDto:
      type: object
      properties:
        rates:
          type: array
          items:
            $ref: '#/components/schemas/GivenRateDto'
      required:
        - rates
    PostMessageDto:
      type: object
      properties:
        receiverId:
          type: string
        text:
          type: string
      required:
        - receiverId
        - text
    MessageDto:
      type: object
      properties:
        isOwn:
          type: boolean
        createdAt:
          format: date-time
          type: string
        text:
          type: string
      required:
        - isOwn
        - createdAt
        - text
    GetMessagesResDto:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageDto'
      required:
        - messages